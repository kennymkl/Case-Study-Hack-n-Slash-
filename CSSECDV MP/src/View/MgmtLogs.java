/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Controller.SessionManager;
import Model.Logs;
import java.awt.CardLayout;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author beepxD
 */
public class MgmtLogs extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;
    private String username;
    
    public MgmtLogs(SQLite sqlite, String username) {
        this.username = username;
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));
        System.out.println("DEBUG MODE IS: "+sqlite.DEBUG_MODE);
//        UNCOMMENT TO DISABLE BUTTONS
//        clearBtn.setVisible(false);
//        debugBtn.setVisible(false);
    }

    public void init(){
        //      CLEAR TABLE
      
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<Logs> logs = sqlite.getLogs();
        for(int nCtr = 0; nCtr < logs.size(); nCtr++){
            tableModel.addRow(new Object[]{
                logs.get(nCtr).getEvent(), 
                logs.get(nCtr).getUsername(), 
                logs.get(nCtr).getDesc(), 
                logs.get(nCtr).getTimestamp()});
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        clearBtn = new javax.swing.JButton();
        debugBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Event", "Username", "Description", "Timestamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(80);
            table.getColumnModel().getColumn(1).setPreferredWidth(160);
            table.getColumnModel().getColumn(2).setPreferredWidth(400);
            table.getColumnModel().getColumn(3).setPreferredWidth(240);
        }

        clearBtn.setBackground(new java.awt.Color(255, 255, 255));
        clearBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        clearBtn.setText("CLEAR");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        debugBtn.setBackground(new java.awt.Color(255, 255, 255));
        debugBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        debugBtn.setText("ENABLE/DISABLE DEBUG MODE");
        debugBtn.setToolTipText("");
        debugBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(debugBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(clearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debugBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        if (!checkSessionAndRedirect()) return;
        sqlite.truncateLogs();
        sqlite.addLogs("NOTICE", username, "Cleared logs", new Timestamp(new Date().getTime()).toString());
        init();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void debugBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugBtnActionPerformed
        if (!checkSessionAndRedirect()) return;
       
        if(sqlite.DEBUG_MODE == 1){
            sqlite.DEBUG_MODE = 0;
             System.out.println("DEBUG IS ON");
        }
            
        else{
            
            
             sqlite.DEBUG_MODE = 1;
            System.out.println("DEBUG IS ON " + sqlite.DEBUG_MODE);
            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a row to edit.");
                return;
            }
            String event = (String) tableModel.getValueAt(selectedRow, 0);
            String user = (String) tableModel.getValueAt(selectedRow, 1);
            String desc = (String) tableModel.getValueAt(selectedRow, 2);
            
            String descPrev = (String) tableModel.getValueAt(selectedRow,2);
            
            Object timestampObj = tableModel.getValueAt(selectedRow, 3);
            String timestamp = "";
            if (timestampObj instanceof Timestamp) {
                timestamp = ((Timestamp) timestampObj).toString();
            } else if (timestampObj instanceof String) {
                timestamp = (String) timestampObj;
            }
            JTextField eventFld = new JTextField(event);
            JTextField usernameFld = new JTextField(user);
            JTextField descFld = new JTextField(desc);
            JTextField timestampFld = new JTextField(timestamp);

            timestampFld.setEnabled(false);
            usernameFld.setEnabled(false);

            Object[] message = {
                "Event:", eventFld,
                "Username:", usernameFld,
                "Description:", descFld,
                "Timestamp:", timestampFld
            };

            

            int result = JOptionPane.showConfirmDialog(null, message, "Edit Log Entry", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                    String newEvent = eventFld.getText();
                    String newDesc = descFld.getText();
                    System.out.println("New Event: " + newEvent);
                    System.out.println("New Description: " + newDesc);

                    if (isValidInput(newEvent) && isValidInput(newDesc)) {
                        System.out.println("Timestamp used for update before db: " + timestampFld.getText());
                        tableModel.setValueAt(newEvent, selectedRow, 0);
                        tableModel.setValueAt(usernameFld.getText(), selectedRow, 1);
                        tableModel.setValueAt(newDesc, selectedRow, 2);
                        tableModel.setValueAt(timestampFld.getText(), selectedRow, 3);

                        // once the log is edited add it to the logs
                        sqlite.updateLogEntry(timestampFld.getText(), newEvent, newDesc);
                        
                        String newLog = "Edited from {" + descPrev + "} to {" + newDesc + "} TIMESTAMP: " + timestampFld.getText();


                     
                        sqlite.addLogs("Edited A LOG", username, newLog, new Timestamp(new Date().getTime()).toString());
                        JOptionPane.showMessageDialog(null, "Log edited successfully", "Account Status", JOptionPane.INFORMATION_MESSAGE);
                        
                    
                    } else {
                        System.out.println("NOT VALID");
                    }
                }
            sqlite.DEBUG_MODE = 0;
        // debug here
        }
        init();
    }//GEN-LAST:event_debugBtnActionPerformed
    private boolean isValidInput(String input) {
         // Regex pattern to match 1-100 characters, consisting of letters and numbers
        String regex = "^[a-zA-Z0-9 ]{1,500}$";
        return input.matches(regex);
    }
    

    
    private boolean checkSessionAndRedirect() {
        if (!SessionManager.getInstance().isSessionValid()) {
            JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);

            if (topFrame instanceof Frame) {
                Frame frame = (Frame) topFrame;
                CardLayout cardLayout = frame.getFrameViewLayout();
                cardLayout.show(frame.getContainerPanel(), "loginPnl");
                return false;
            } else {
                System.err.println("Top Frame is not an instance of Frame");
                return false;
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton debugBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
